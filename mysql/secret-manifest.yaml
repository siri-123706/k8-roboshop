apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: roboshop
  # deployment labels
  labels:
    component: mysql
    project: roboshop
    tier: database
spec:
  replicas: 1
  # These are the labels replica set use to create pod replicas, this should match pod labels
  selector:
    matchLabels:
      component: mysql
      project: roboshop
      tier: database
  # This is pod definition
  template:
    metadata:
      labels:
        component: mysql
        project: roboshop
        tier: database
    spec:
      serviceAccount: roboshop-mysql-secrete-reader
      volumes: # like harddisk added
      - name: mysql-secret
        emptyDir: {} #if you want to share storage to all athe containers inside pod, we can go for emty dir
      containers:
      - name: mysql
        image: shirisha104/mysql:v2
        imagePullPolicy: Always #image already push to dockerhub and pull the inage but changes so, if anyupdates in image and push dockerhub then keep always in imagePullPolicy
        volumeMounts: # mount like partition
        - mountPath: /tmp
          name: mysql-secret
      initContainers:
      - name: fetch-secret
        image: amazon/aws-cli
        # command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
        command:
        - sh
        - -c
        - |
          aws secretsmanager get-secret-value --secret-id roboshop/mysql/password --query SecretString --output text | jq -r .MYSQL_ROOT_PASSWORD > /tmp/mysql_root_password.txt
        volumeMounts:
        - mountPath: /tmp
          name: mysql-secret
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: roboshop
  labels:
    component: mysql
    project: roboshop
    tier: database
spec:
  selector:
    component: mysql
    project: roboshop
    tier: database
  ports:
  - protocol: TCP
    port: 3306 # service port
    targetPort: 3306 # container port